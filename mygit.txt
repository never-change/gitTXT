测试有没有安装		git

安装			sudo apt-get install git

创建目录		mkdir learngit    （就是创建一个文件夹）

进入创建的目录		cd learngit

显示当前目录		pwd

创建Git仓库		git init	（就是把当前目录变成Git可以管理的仓库）
	
创建文件		readme.txt	（在learngit目录下，子目录也可以）
	
把文件添加到仓库	git add readme.tx

提交			git commit -m "wrote a readme file"	（"wrote a readme file"是本次提交说明）

提交多个文件		git add file1.txt
			git add file2.txt file3.txt
			git commit -m "add 3 files."

查看当前的状态		git status

查看修改内容		git diff readme.txt 	（如果git status告诉你有文件被修改过，用git diff可以查看修改内容）

查看提交历史		git log		（提交的版本日志,主要看版本号）
			git log --pretty=oneline	（简略信息）

回退到上一个版本	git reset --hard HEAD^
			（HEAD：当前版本， HEAD^：上一个版本， HEAD^^：上上个版本， HEAD~100：网上100个版本）

回到指定的某个版本	git reset --hard 3628164	（3628164：日志文件里的版本号，前面几位就行，不用写全）

查看文件的内容		cat readme.txt（Linux基础命令）

查看命令历史		git reflog		（查看所有的命令历史，主要看版本号）

工作区			就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区

版本库			工作区有一个隐藏目录.git

			Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
			还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

			把文件往Git版本库里添加的时候，是分两步执行的：
			第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
			第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
			因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，
			所以，现在，git commit就是往master分支上提交更改。

管理修改		Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中

撤销修改		git checkout -- readme.txt
			（让这个文件回到最近一次git commit或git add时的状态）

			git reset HEAD readme.txt
			（把暂存区的修改撤销掉（unstage），重新放回工作区）

			场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

			场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
			分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

删除文件		rm test.txt（删除文件，Linux基础命令）
			
			git rm test.txt
			git commit -m "remove test.txt"（将文件从版本库中被删除）

			git checkout -- test.txt（把误删的文件恢复到最新版本，慎用）

创建SSH Key		第一步：在用户主目录下，看有没有.ssh目录(命令：ls -la)，
			如果有，再看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有，下一步

			如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
				ssh-keygen -t rsa -C "1349265742@qq.com"
			把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，无需设置密码
			
			第二部：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
			然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

添加远程库		登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
			在Repository name填入learngit，其他保持默认设置
			根据GitHub的提示，在本地的learngit仓库下运行命令：
				git remote add origin git@github.com:never-change/learngit.git
			（远程库的名字就是origin）
			把本地库的所有内容推送到远程库上：
			git push -u origin master（第一次推送的时候加参数-u）
			git push origin master

从远程库克隆		git clone git@github.com:never-change/gitTXT.git	（后面这一段是git的克隆地址）
			（注意：在GitHub创建仓库的时候勾选“Initialize this repository with a README”，这样才可以多个电脑克隆）

创建与合并分支		查看分支：git branch
			创建分支：git branch <name>
			切换分支：git checkout <name>
			创建+切换分支：git checkout -b <name>
			合并某分支到当前分支：git merge <name>		（先切换到主分支再合并）
			删除分支：git branch -d <name>

查看分支合并情况	git log --graph	（分之合并详图）
			git log --graph --pretty=oneline --abbrev-commit	（分之合并简图）
			































			

